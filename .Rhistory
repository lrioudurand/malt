potential=function(x){sum(0.5*x^2/sigma^2)}
grad=function(x){x/sigma^2}
n=10^6
g=1.5
h=0.20
T_phys=2
x_init=rnorm(d)*sigma
malt(potential,grad,n,g,h,T_phys,x_init)
#dimension
d=50
#friction parameter (malt: g>0, hmc:g=0)
g=1.5
#time steps for 65% acceptance rate (isotropic) for d=50: h=0.71, d=200: h=0.51, d=1000: h=0.34, d=5000: h=0.23, d=20000: h=0.18
h=0.20
#verlet update
verlet_x=function(v,x,grad_x){x+h*v-(h^2/2)*grad_x}
verlet_v=function(v,grad_x,grad_y){v-h*(grad_x+grad_y)/2}
#local energy error (simplified to stack up some terms see below)
local_error=function(x,y){(1/2)*sum((x-y)*(grad(x)+grad(y)))}
#target: ANISOTROPIC Gaussian (set sigma=rep(1,d) for isotropic)
sigma=((d:1)/d)^(1/2)
grad=function(x){x/sigma^2}
potential=function(x){sum(0.5*x^2/sigma^2)}
##### Other choices of targets ######
#target: ANISOTROPIC Gaussian mixture
#c=1/4
#a=(c*(d:1)/(d^2))^(1/2)
#grad=function(x){((x-a)/sigma^2)+2*(a/sigma^2)/(1+exp(-2*sum(x*a/sigma^2)))}
#potential=function(x){sum((x-a)^2/(2*sigma^2))-log(1+exp(-2*sum(x*a/sigma^2)))}
#target: ANISOTROPIC Student
#nu=20
#grad=function(x){(nu+d)*(x/sigma^2)/(nu+sum(x^2/sigma^2))}
#potential=function(x){((nu+d)/2)*log(1+sum(x^2/sigma^2)/(nu))}
########## Metropolis Adjusted Langevin Trajectories ##########
#physical path length of each trajectory (additional degree of freedom compared to GHMC with L=1)
T_phys=2
#number of mcmc samples
n=100000
#number of steps per trajectory (mala: L=1)
L=floor(T_phys/h)
#persistence
eta=exp(-g*h/2)
#init (from stationarity gaussian)
onedim_chain=matrix(0,nr=n,nc=d)
malt_v=rnorm(d)*sigma
malt_x=rnorm(d)*sigma
onedim_chain[1,]=malt_x
for(i in 1:(n-1)){
x=malt_x
grad_x=grad(malt_x)
v=rnorm(d)
#energy error
Delta=0
for(j in 1:L){
v=eta*v+sqrt(1-eta^2)*rnorm(d)
y=verlet_x(v,x,grad_x)
grad_y=grad(y)
w=verlet_v(v,grad_x,grad_y)
w=eta*w+sqrt(1-eta^2)*rnorm(d)
Delta=Delta+local_error(x,y)
x=y
grad_x=grad_y
v=w
}
log_alpha=-(h^2/8)*(sum(grad(y)^2)-sum(grad(malt_x)^2))-(potential(y)-potential(malt_x))-Delta
u=runif(1)
malt_x=y*(log(u)<log_alpha)+malt_x*(log(u)>log_alpha)
onedim_chain[i+1,]=malt_x
}
library(malt)
d=50
sigma=((d:1)/d)^(1/2)
potential=function(x){sum(0.5*x^2/sigma^2)}
grad=function(x){x/sigma^2}
n=10^3
g=1.5
h=0.20
T_phys=2
x_init=rnorm(d)*sigma
malt(potential,grad,n,g,h,T_phys,x_init)
d=50
sigma=((d:1)/d)^(1/2)
potential=function(x){sum(0.5*x^2/sigma^2)}
grad=function(x){x/sigma^2}
n=10^6
g=1.5
h=0.20
T_phys=2
x_init=rnorm(d)*sigma
malt(potential,grad,n,g,h,T_phys,x_init)
#dimension
d=50
#friction parameter (malt: g>0, hmc:g=0)
g=1.5
#time steps for 65% acceptance rate (isotropic) for d=50: h=0.71, d=200: h=0.51, d=1000: h=0.34, d=5000: h=0.23, d=20000: h=0.18
h=0.20
#verlet update
verlet_x=function(v,x,grad_x){x+h*v-(h^2/2)*grad_x}
verlet_v=function(v,grad_x,grad_y){v-h*(grad_x+grad_y)/2}
#local energy error (simplified to stack up some terms see below)
local_error=function(x,y){(1/2)*sum((x-y)*(grad(x)+grad(y)))}
#target: ANISOTROPIC Gaussian (set sigma=rep(1,d) for isotropic)
sigma=((d:1)/d)^(1/2)
grad=function(x){x/sigma^2}
potential=function(x){sum(0.5*x^2/sigma^2)}
##### Other choices of targets ######
#target: ANISOTROPIC Gaussian mixture
#c=1/4
#a=(c*(d:1)/(d^2))^(1/2)
#grad=function(x){((x-a)/sigma^2)+2*(a/sigma^2)/(1+exp(-2*sum(x*a/sigma^2)))}
#potential=function(x){sum((x-a)^2/(2*sigma^2))-log(1+exp(-2*sum(x*a/sigma^2)))}
#target: ANISOTROPIC Student
#nu=20
#grad=function(x){(nu+d)*(x/sigma^2)/(nu+sum(x^2/sigma^2))}
#potential=function(x){((nu+d)/2)*log(1+sum(x^2/sigma^2)/(nu))}
########## Metropolis Adjusted Langevin Trajectories ##########
#physical path length of each trajectory (additional degree of freedom compared to GHMC with L=1)
T_phys=2
#number of mcmc samples
n=100000
#number of steps per trajectory (mala: L=1)
L=floor(T_phys/h)
#persistence
eta=exp(-g*h/2)
#init (from stationarity gaussian)
onedim_chain=matrix(0,nr=n,nc=d)
malt_v=rnorm(d)*sigma
malt_x=rnorm(d)*sigma
onedim_chain[1,]=malt_x
for(i in 1:(n-1)){
x=malt_x
grad_x=grad(malt_x)
v=rnorm(d)
#energy error
Delta=0
for(j in 1:L){
v=eta*v+sqrt(1-eta^2)*rnorm(d)
y=verlet_x(v,x,grad_x)
grad_y=grad(y)
w=verlet_v(v,grad_x,grad_y)
w=eta*w+sqrt(1-eta^2)*rnorm(d)
Delta=Delta+local_error(x,y)
x=y
grad_x=grad_y
v=w
}
log_alpha=-(h^2/8)*(sum(grad(y)^2)-sum(grad(malt_x)^2))-(potential(y)-potential(malt_x))-Delta
u=runif(1)
malt_x=y*(log(u)<log_alpha)+malt_x*(log(u)>log_alpha)
onedim_chain[i+1,]=malt_x
}
test_malt=function(potential,grad,n,g,h,T_phys,x_init){
#number of steps per trajectory (mala: L=1)
L=floor(T_phys/h)
#persistence
eta=exp(-g*h/2)
#init (from stationarity gaussian)
onedim_chain=matrix(0,nr=n,nc=d)
malt_v=rnorm(d)*sigma
malt_x=rnorm(d)*sigma
onedim_chain[1,]=malt_x
for(i in 1:(n-1)){
x=malt_x
grad_x=grad(malt_x)
v=rnorm(d)
#energy error
Delta=0
for(j in 1:L){
v=eta*v+sqrt(1-eta^2)*rnorm(d)
y=verlet_x(v,x,grad_x)
grad_y=grad(y)
w=verlet_v(v,grad_x,grad_y)
w=eta*w+sqrt(1-eta^2)*rnorm(d)
Delta=Delta+local_error(x,y)
x=y
grad_x=grad_y
v=w
}
log_alpha=-(h^2/8)*(sum(grad(y)^2)-sum(grad(malt_x)^2))-(potential(y)-potential(malt_x))-Delta
u=runif(1)
malt_x=y*(log(u)<log_alpha)+malt_x*(log(u)>log_alpha)
onedim_chain[i+1,]=malt_x
}
return(list(chain=onedim_chain))
}
test_malt(potential,grad,n,g,h,T_phys,x_init)
test_malt_bis=function(potential,grad,n,g,h,T_phys,x_init){
d=length(x_init)
if(T_phys<h){warning("Integration time is lower than the time step, setting T_phys=h instead.");T_phys=h}
L=floor(T_phys/h)
eta=exp(-g*h/2)
onedim_chain=matrix(0,nrow=n,ncol=d)
malt_v=rnorm(d)
malt_x=x_init
onedim_chain[1,]=malt_x
for(i in 1:(n-1)){
x=malt_x
grad_x=grad(malt_x)
potential_malt_x=potential(malt_x)
grad_malt_x=grad_x
v=rnorm(d)
Delta=0
for(j in 1:L){
v=eta*v+sqrt(1-eta^2)*rnorm(d)
w=v-(h/2)*grad_x
y=x+h*w
grad_y=grad(y)
w=w-(h/2)*grad_y
#y=verlet_x(v,x,grad_x,h)
#grad_y=grad(y)
#w=verlet_v(v,grad_x,grad_y,h)
w=eta*w+sqrt(1-eta^2)*rnorm(d)
#Delta=Delta+local_error(x,y,grad_x,grad_y)
Delta=Delta+(1/2)*sum((x-y)*(grad_x+grad_y))
x=y
grad_x=grad_y
v=w
}
#log_alpha=-global_error(potential_malt_x,potential(y),grad_malt_x,grad_y,h)-Delta
log_alpha=-(h^2/8)*(sum(grad_y^2)-sum(grad_malt_x^2))-(potential(y)-potential_malt_x)-Delta
u=runif(1)
malt_x=y*(log(u)<log_alpha)+malt_x*(log(u)>log_alpha)
onedim_chain[i+1,]=malt_x
}
return(list(chain=onedim_chain))
}
test_malt_bis(potential,grad,n,g,h,T_phys,x_init)
library(malt)
#dimension
d=50
#friction parameter (malt: g>0, hmc:g=0)
g=1.5
#time steps for 65% acceptance rate (isotropic) for d=50: h=0.71, d=200: h=0.51, d=1000: h=0.34, d=5000: h=0.23, d=20000: h=0.18
h=0.20
#target: ANISOTROPIC Gaussian (set sigma=rep(1,d) for isotropic)
sigma=((d:1)/d)^(1/2)
grad=function(x){x/sigma^2}
potential=function(x){sum(0.5*x^2/sigma^2)}
#physical path length of each trajectory (additional degree of freedom compared to GHMC with L=1)
T_phys=2
#number of mcmc samples
n=100000
##### Other choices of targets ######
malt(potential,grad,n,g,h,T_phys,x_init)
d=50
sigma=((d:1)/d)^(1/2)
potential=function(x){sum(0.5*x^2/sigma^2)}
grad=function(x){x/sigma^2}
n=10^4
g=1.5
h=0.20
T_phys=2
x_init=rnorm(d)*sigma
malt(potential,grad,n,g,h,T_phys,x_init)
d=50
sigma=((d:1)/d)^(1/2)
potential=function(x){sum(0.5*x^2/sigma^2)}
grad=function(x){x/sigma^2}
n=10^4
g=1.5
h=0.20
T_phys=2
x_init=rnorm(d)*sigma
malt(potential,grad,n,g,h,T_phys,x_init)
d=50
sigma=((d:1)/d)^(1/2)
potential=function(x){sum(0.5*x^2/sigma^2)}
grad=function(x){x/sigma^2}
n=10^4
g=1.5
h=0.20
T_phys=2
x_init=rnorm(d)*sigma
malt(potential,grad,n,g,h,T_phys,x_init)
d=50
sigma=((d:1)/d)^(1/2)
potential=function(x){sum(0.5*x^2/sigma^2)}
grad=function(x){x/sigma^2}
n=10^4
g=1.5
h=0.20
T_phys=2
x_init=rnorm(d)*sigma
malt(potential,grad,n,g,h,T_phys,x_init)
library(malt)
#dimension
d=50
#friction parameter (malt: g>0, hmc:g=0)
g=1.5
#time steps for 65% acceptance rate (isotropic) for d=50: h=0.71, d=200: h=0.51, d=1000: h=0.34, d=5000: h=0.23, d=20000: h=0.18
h=0.20
#target: ANISOTROPIC Gaussian (set sigma=rep(1,d) for isotropic)
sigma=((d:1)/d)^(1/2)
grad=function(x){x/sigma^2}
potential=function(x){sum(0.5*x^2/sigma^2)}
#physical path length of each trajectory (additional degree of freedom compared to GHMC with L=1)
T_phys=2
#number of mcmc samples
n=100000
malt(potential,grad,n,g,h,T_phys,x_init)
malt(potential,grad,n,g,h,T_phys,x_init)
library(malt)
malt(potential,grad,n,g,h,T_phys,x_init)
malt(potential,grad,n,g,h,T_phys,x_init)
malt(potential,grad,n,g,h,T_phys,x_init)
malt(potential,grad,n,g,h,T_phys,x_init)
library(malt)
malt(potential,grad,n,g,h,T_phys,x_init)
install.packages("cranlogs")
library(cranlogs)
cran_downloads(when = "last-week", packages = c("ggplot2", "httr"))
cran_downloads(when = "last-week", packages = c("ggplot2", "RZigZag"))
cran_downloads(when = "last-week", packages = c("rhmc", "RZigZag"))
library(malt)
malt(potential,grad,n,g,h,T_phys,x_init)
?malt
cran_downloads(when = "last-week", packages = c("rhmc", "RZigZag"))
malt(potential,grad,n,g,h,T_phys,x_init)
?malt
library(malt)
?malt
#' d=50
#' sigma=((d:1)/d)^(1/2)
#' potential=function(x){sum(0.5*x^2/sigma^2)}
#' grad=function(x){x/sigma^2}
#' n=10^4
#' g=1.5
#' h=0.20
#' T_phys=2
#' x_init=rnorm(d)*sigma
#' malt(potential,grad,n,g,h,T_phys,x_init)
malt=function(potential,grad,n,g,h,T_phys,x_init){
d=length(x_init)
if(T_phys<h){warning("Integration time is lower than the time step, setting T_phys=h instead.");T_phys=h}
L=floor(T_phys/h)
eta=exp(-g*h)
zeta=sqrt(1-eta^2)
onedim_chain=matrix(0,nrow=n,ncol=d)
malt_v=rnorm(d)
malt_x=x_init
onedim_chain[1,]=malt_x
for(i in 1:(n-1)){
x=malt_x
grad_x=grad(malt_x)
potential_malt_x=potential(malt_x)
sum_grad_sq=sum(grad_x^2)
v=rnorm(d)
Delta=0
for(j in 1:L){
v=v-(h/2)*grad_x
x=x+h*v
grad_y=grad(x)
Delta=Delta-(h/2)*sum(v*(grad_x+grad_y))
v=v-(h/2)*grad_y
v=eta*v+zeta*rnorm(d)
grad_x=grad_y
}
log_alpha=(h^2/8)*(sum(grad_x^2)-sum_grad_sq)+potential(x)-potential_malt_x+Delta
if(rexp(1)>log_alpha){malt_x=x}
onedim_chain[i+1,]=malt_x
}
return(list(chain=onedim_chain))
}
library(malt)
?malt
library(malt)
?malt
install.packages("Roxygen2")
install.packages("roxygen2")
library(roxygen2)
?malt
library(malt)
?malt
library(malt)
?malt
devtools::use_package("stats")
devtools::use_package('stats')
usethis::use_build_ignore("devtools_history.R")
usethis::use_package('stats')
library(malt)
usethis::use_vignette("comment-utiliser-mon-package")
library(malt)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(malt)
?malt
?malt
library(malt)
?malt
library(roxygen2)
?malt
library(malt)
usethis::use_vignette("comment-utiliser-mon-package")
library(malt)
?malt
library(malt)
?malt
library(malt)
malt(potential,grad,n,g,h,T_phys,x_init)
?malt
d=50
sigma=((d:1)/d)^(1/2)
potential=function(x){sum(0.5*x^2/sigma^2)}
grad=function(x){x/sigma^2}
n=10^4
g=1.5
h=0.20
T_phys=2
x_init=rnorm(d)*sigma
malt(potential,grad,n,g,h,T_phys,x_init)
mean(output$chain[2:n,]!=output$chain[1:(n-1),])
g=0
h=0.20
T_phys=2
x_init=rnorm(d)*sigma
x_init=rep(5,d)
n=10^4
output=malt(potential,grad,n,g,h,T_phys,x_init)
mean(output$chain[2:n,]!=output$chain[1:(n-1),])
library(coda)
effectiveSize(output$chain)
effectiveSize(output$chain^2)
g=1.5
h=0.20
T_phys=2
x_init=rnorm(d)*sigma
x_init=rep(5,d)
n=10^4
output=malt(potential,grad,n,g,h,T_phys,x_init)
effectiveSize(output$chain^2)
library(malt)
library(malt)
?help(malt)
?malt
d=50
sigma=((d:1)/d)^(1/2)
potential=function(x){sum(0.5*x^2/sigma^2)}
grad=function(x){x/sigma^2}
n=10^4
g=1.5
h=0.20
T_phys=2
x_init=rnorm(d)*sigma
malt(potential,grad,n,g,h,T_phys,x_init)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(malt)
library(cranlogs)
cran_downloads("rhmc")
d=50
sigma=((d:1)/d)^(1/2)
potential=function(x){sum(0.5*x^2/sigma^2)}
grad=function(x){x/sigma^2}
n=10^5
g=1.5
h=0.20
T_phys=2
x_init=rnorm(d)*sigma
malt(potential,grad,n,g,h,T_phys,x_init)
par(mfrow=c(1,1))
par(mfrow=c(2,1))
par(mfrow=c(1,2))
usethis::use_package('coda')
library(malt)
library(malt)
library(malt)
?which
}
which(1:10 > 3)
?rank
which(10:1 > 3)
?table
?kable
kable(cbind(c(1,2),c(3,4)))
?matrix
?whiskers
?boxplot
?malt
library(malt)
?malt
build()
install_local(build_vignettes = TRUE, force = TRUE)
install(build_vignettes = TRUE, force = TRUE)
library(devtools)
install(build_vignettes = TRUE, force = TRUE)
?malt
library(malt)
?malt
library(malt)
?malt
install(build_vignettes = TRUE, force = TRUE)
?malt
library(malt)
?malt
install()
?malt
library(malt)
library(malt)
?malt
build_vignettes()
?malt
library(malt)
?malt
library(malt)
library(malt)
?malt
file.exists("~/.ssh/id_rsa.pub")
usethis::use_mit_license()
